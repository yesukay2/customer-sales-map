import { useState, useEffect } from "react";
import axios from "axios";
import { QRCodeCanvas } from "qrcode.react";
import "./Styles/customers.css";
import { PropagateLoader } from "react-spinners";

const API_KEY = "AIzaSyCFjf_qjHwnZHf9vAiYo9mkyQecuhx46Mo";

const serverLink = import.meta.env.VITE_SERVER_LINK;

const CustomerList = () => {
  const [customers, setCustomers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [qrCode, setQrCode] = useState(null);
  const [selectedCustomer, setSelectedCustomer] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState(""); // Search query state

  useEffect(() => {
    const fetchCustomers = async () => {
      setLoading(true);
      try {
        const response = await axios.get(`${serverLink}/csm/customers`, {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        const customerData = await Promise.all(
          response.data.map(async (customer) => {
            if (customer.geolocation) {
              const locationName = await getGeolocationName(
                customer.geolocation.coordinates[1],
                customer.geolocation.coordinates[0]
              );
              return { ...customer, locationName };
            }
            return customer;
          })
        );
        setCustomers(customerData);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching customers:", error);
        setLoading(false);
      }
    };

    fetchCustomers();
  }, []);

  // Reverse geocode function
  const getGeolocationName = async (latitude, longitude) => {
    try {
      const response = await axios.get(
        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${API_KEY}`
      );
      const results = response.data.results;
      if (results.length > 0) {
        return results[0].formatted_address;
      } else {
        return "Location name not available";
      }
    } catch (error) {
      console.error("Error reverse geocoding:", error);
      return "Location name not available";
    }
  };

  // Handle displaying the QR code
  const handleShowQrCode = (customer) => {
    setSelectedCustomer(customer);
    setQrCode(customer.qrCode);
    setIsModalOpen(true);
  };

  // Handle modal close
  const handleCloseModal = () => {
    setIsModalOpen(false);
    setQrCode(null);
    setSelectedCustomer(null);
  };

  // Print the QR code
  const handlePrint = () => {
    const printWindow = window.open("", "_blank");

    printWindow.document.write(
      `<html>
      <head>
        <title>Print QR Code</title>
        <style>
          body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
          h3 { font-size: 18px; margin-bottom: 20px; color: #333; }
          .qrCodeContainer { margin-bottom: 30px; }
          .footer { margin-top: 30px; font-size: 12px; color: #666; }
          @media print { body { padding: 10px; } }
        </style>
      </head>
      <body>
        <h3>QR Code for ${selectedCustomer.name}</h3>
        <div class="qrCodeContainer">
          <img src="${document
            .getElementById("qrCodeCanvas")
            .toDataURL()}" alt="QR Code" />
        </div>
        <div class="footer">
          <p>Generated by Samara Company Ltd.</p>
        </div>
      </body>
    </html>`
    );

    printWindow.document.close();
    printWindow.print();
  };

  // Filter customers based on search query
  const filteredCustomers = customers.filter((customer) => {
    const lowerCaseQuery = searchQuery.toLowerCase();
    return (
      customer.name.toLowerCase().includes(lowerCaseQuery) ||
      (customer.locationName &&
        customer.locationName.toLowerCase().includes(lowerCaseQuery)) ||
      customer.email.toLowerCase().includes(lowerCaseQuery) ||
      customer.phone.toLowerCase().includes(lowerCaseQuery)
    );
  });

  return (
    <div className="customerListContainer">
      <h1 className="customerListTitle">Customers</h1>
      <div className="searchContainer">
        <i className="fa fa-search searchIcon"></i> {/* Search icon */}
        <input
          type="text"
          placeholder="Search by name, email, phone, or location"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="searchInput"
        />
      </div>

      {loading ? (
        <div className="loadingContainer">
          <PropagateLoader color="#db7d2f" size={15} />
        </div>
      ) : filteredCustomers.length > 0 ? (
        <table className="customerTable">
          <thead>
            <tr>
              <th>ID</th>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Location</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredCustomers.map((customer, index) => (
              <tr key={customer._id}>
                <td>{index + 1}</td>
                <td>{customer.name}</td>
                <td>{customer.email}</td>
                <td>{customer.phone}</td>
                <td>{customer.locationName || "Location not available"}</td>
                <td>
                  <button onClick={() => handleShowQrCode(customer)}>
                    Show QR Code
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <div>No customers found.</div>
      )}

      {isModalOpen && (
        <div className="modal">
          <div className="modalContent">
            <span className="closeButton" onClick={handleCloseModal}>
              &times;
            </span>
            <div id="qrCodeHeading">QR Code for {selectedCustomer.name}</div>
            <QRCodeCanvas
              id="qrCodeCanvas"
              value={qrCode}
              size={150}
              level={"H"}
            />
            <br />
            <button onClick={handlePrint} style={{ marginTop: "15px" }}>
              Print QR Code
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CustomerList;
